#ifndef HLTAnalyzer_h
#define HLTAnalyzer_h 1

#include <typeinfo>

// #include "DataFormats/HcalDetId/interface/HcalDetId.h"
//#include "HcalPulseShapes.h"
//#include "HcalTimeSlew.h"
// #include "CalibFormats/HcalObjects/interface/HcalCoder.h"
// #include "CalibFormats/HcalObjects/interface/HcalCalibrations.h"
//#include "HybridMinimizer.h"

#include <TMinuit.h>

//#include <TH1.h>
#include "Minuit2/FCNBase.h"
#include "Minuit2/Minuit2Minimizer.h"
#include "Math/Functor.h"


namespace HcalConst{

   constexpr int maxSamples = 10;
   constexpr int maxPSshapeBin = 256;
   constexpr int nsPerBX = 25;
   constexpr float iniTimeShift = 98.0f;
   constexpr double invertnsPerBx = 0.04;

}

class HLTAnalyzer
{
public:
    HLTAnalyzer();
    ~HLTAnalyzer();
    // This is the CMSSW Implementation of the apply function
    //void apply(const CaloSamples & cs, const std::vector<int> & capidvec, const HcalCalibrations & calibs, std::vector<double> & correctedOutput) const;
    // This is the edited implementation for our standalone test code
    void apply(const std::vector<double> & inputCharge, const std::vector<double> & inputPedestal, const std::vector<double> & inputGain, std::vector<double> & correctedOutput) const;


private:
  
};

#endif // HLTAnalyzer_h
